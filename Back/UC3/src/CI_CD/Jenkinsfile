pipeline {
    agent {
        kubernetes {
            yamlFile 'CI_CD/BuildPod.yaml'
            defaultContainer 'docker'
        }
    }

    options {
        buildDiscarder(logRotator(artifactDaysToKeepStr: '5', artifactNumToKeepStr: '5', numToKeepStr: '20'))
        timeout(time: 60, unit: 'MINUTES')
    }

    stages {
        stage('Copy Magento repo auth file') {
            steps {
                withCredentials([file(credentialsId: 'MAGENTO_REPO_AUTH', variable: 'AUTH_FILE')]) {
                    sh "cp --remove-destination \"$AUTH_FILE\" CI_CD/auth.json"
                }
            }
        }

        stage('Build') {
            steps {
                sh 'docker build --tag msebnpwsakspracr1.azurecr.io/twint-backend .'
            }
        }

        stage('Tagging and Push') {
            when {
                expression { env.BRANCH_NAME == 'master' || env.BRANCH_NAME  ==~ "(?i)(release)-.*"   }
            }
            steps {
                // Tagging
                script {
                    if (env.BRANCH_NAME == 'master') {
                        sh 'docker tag msebnpwsakspracr1.azurecr.io/twint-backend msebnpwsakspracr1.azurecr.io/twint-backend:stable'
                    }
                    sh 'docker tag msebnpwsakspracr1.azurecr.io/twint-backend msebnpwsakspracr1.azurecr.io/twint-backend:latest'
                }

                // Push
                withCredentials([usernamePassword(credentialsId: 'AZURE_CR_CREDENTIALS', usernameVariable: 'REG_USER', passwordVariable: 'REG_PASS')]) {
                    sh "docker login --username \"${REG_USER}\" --password \"${REG_PASS}\" msebnpwsakspracr1.azurecr.io"
                }
                script {
                    if (env.BRANCH_NAME == 'master') {
                        sh 'docker push msebnpwsakspracr1.azurecr.io/twint-backend:stable'
                    }
                }
                sh 'docker push msebnpwsakspracr1.azurecr.io/twint-backend:latest'
            }
        }
    }
}
