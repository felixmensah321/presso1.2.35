<?php

namespace SQLi\Import\Console\Command;

use Magento\Customer\Model\Address;
use Magento\Customer\Model\AddressFactory as CustomerAddressFactory;
use Magento\Customer\Model\Customer;
use Magento\Customer\Model\CustomerFactory;
use Magento\Framework\App\State;
use Magento\Framework\DB\Adapter\AdapterInterface;
use Magento\Sales\Model\Order;
use Magento\Sales\Model\OrderFactory;
use Magento\Sales\Model\Order\Address as OrderAddress;
use Magento\Sales\Model\Order\AddressFactory as OrderAddressFactory;
use SQLi\Sales\Model\Quote as TwintQuote;
use Magento\Quote\Model\Quote;
use Magento\Quote\Model\QuoteFactory;
use Magento\Quote\Model\Quote\Address as QuoteAddress;
use Magento\Quote\Model\Quote\AddressFactory as QuoteAddressFactory;
use SQLi\Import\Helper\Data;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Magento\Framework\App\ResourceConnection;
use Magento\Framework\Model\ResourceModel\IteratorFactory;

/**
 * Class Anonymize
 * @package SQLi\Import\Console\Command
 */
class Anonymize extends Command
{
    /**
     * Info output type
     */
    const OUTPUT_INFO = 'info';
    /**
     * Error output type
     */
    const OUTPUT_ERROR = 'error';

    /**
     * @var State
     */
    protected $appState;
    /**
     * @var Data
     */
    protected $helper;
    /**
     * @var bool
     */
    protected $force = false;
    /**
     * @var ResourceConnection
     */
    protected $resourceConnection;
    /**
     * @var IteratorFactory
     */
    protected $iteratorFactory;
    /**
     * @var CustomerFactory
     */
    protected $customerFactory;
    /**
     * @var OutputInterface
     */
    protected $output;
    /**
     * @var CustomerAddressFactory
     */
    protected $customerAddressFactory;
    /**
     * @var Address
     */
    protected $customerAddressResourceModel;
    /**
     * @var Order
     */
    protected $orderFactory;
    /**
     * @var OrderAddressFactory
     */
    protected $orderAddressFactory;
    /**
     * @var QuoteFactory
     */
    protected $quoteFactory;
    /**
     * @var QuoteAddressFactory
     */
    protected $quoteAddressFactory;
    /**
     * @var array
     */
    protected $autogeneratedEmails = [];
    /**
     * @var int
     */
    protected $limit;
    /**
     * @var boolean
     */
    protected $silent = false;

    /**
     * Anonymize constructor.
     * @param State $appState
     * @param Data $helper
     * @param ResourceConnection $resourceConnection
     * @param CustomerFactory $customerFactory
     * @param CustomerAddressFactory $customerAddressFactory
     * @param Address $customerAddressResourceModel
     * @param OrderFactory $orderFactory
     * @param OrderAddressFactory $orderAddressFactory
     * @param QuoteFactory $quoteFactory
     * @param QuoteAddressFactory $quoteAddressFactory
     * @param IteratorFactory $iteratorFactory
     * @param string|null $name
     */
    public function __construct(
        State $appState,
        Data $helper,
        ResourceConnection $resourceConnection,
        CustomerFactory $customerFactory,
        CustomerAddressFactory $customerAddressFactory,
        Address $customerAddressResourceModel,
        OrderFactory $orderFactory,
        OrderAddressFactory $orderAddressFactory,
        QuoteFactory $quoteFactory,
        QuoteAddressFactory $quoteAddressFactory,
        IteratorFactory $iteratorFactory,
        string $name = null
    ) {
        $this->appState = $appState;
        $this->helper = $helper;
        $this->resourceConnection = $resourceConnection;
        $this->customerFactory = $customerFactory;
        $this->customerAddressFactory = $customerAddressFactory;
        $this->customerAddressResourceModel = $customerAddressResourceModel;
        $this->orderFactory = $orderFactory;
        $this->orderAddressFactory = $orderAddressFactory;
        $this->quoteFactory = $quoteFactory;
        $this->quoteAddressFactory = $quoteAddressFactory;
        $this->iteratorFactory = $iteratorFactory;
        parent::__construct($name);
    }

    /**
     * @inheritDoc
     */
    protected function configure()
    {
        $this->setName('nespresso:anonymize');
        $this->setDescription('Anonymize customers/addresses/orders');
        $this->addOption('force', 'f', InputOption::VALUE_NONE, 'Force mode else run in dry mode');
        $this->addOption('silent', 's', InputOption::VALUE_NONE, 'Do not display info messages');
        $this->addOption('limit', 'l', InputOption::VALUE_OPTIONAL, 'Limit the number of rows');
        parent::configure();
    }

    /**
     * CLI command description
     *
     * @param InputInterface $input
     * @param OutputInterface $output
     *
     * @return void
     */
    protected function execute(InputInterface $input, OutputInterface $output): void
    {
        $this->output = $output;
        $this->force = (bool) $input->getOption('force');
        $this->silent = (bool) $input->getOption('silent');
        $this->limit = (int) $input->getOption('limit');
        $this->appState->setAreaCode(\Magento\Framework\App\Area::AREA_GLOBAL);
        $this->displayInfo("==== Start of anonymizing datas");
        if (!$this->helper->isAnonymous()) {
            $this->displayError("Anonymous mode is not enabled in back-office. Check the settings.");
            return;
        }

        $this->displayInfo('== Start of anonymizing customers');
        $this->anonymizeCustomers();
        $this->displayInfo('== End of anonymizing customers');

        $this->displayInfo('== Start of anonymizing customer addresses');
        $this->anonymizeCustomerAddresses();
        $this->displayInfo('== End of anonymizing customer addresses');

        $this->displayInfo("== End of anonymizing customer addresses");

        $this->displayInfo("== Start of anonymizing quotes");
        $this->anonymizeQuotes();
        $this->displayInfo("== End of anonymizing quotes");

        $this->displayInfo("== Start of anonymizing quote addresses");
        $this->anonymizeQuoteAddresses();
        $this->displayInfo("== End of anonymizing quote addresses");

        $this->displayInfo("== Start of anonymizing orders");
        $this->anonymizeOrders();
        $this->displayInfo("== End of anonymizing orders");

        $this->displayInfo("== Start of anonymizing order addresses");
        $this->anonymizeOrderAddresses();
        $this->displayInfo("== End of anonymizing order addresses");

        $this->displayInfo("==== End of anonymizing datas");

        if (!$this->force) {
            $this->displayInfo("Nothing has been updated. Dry run is enabled. Use -f to execute.");
        } else {
            $this->displayInfo("Data has been anonymized.");
            $this->displayInfo("Running the full reindexation is recommended.");
        }
    }

    /**
     * Anonymize customers data
     */
    protected function anonymizeCustomers()
    {
        /** @var AdapterInterface $connection */
        $connection = $this->resourceConnection->getConnection();
        $iterator = $this->iteratorFactory->create();

        $maxCharLength = $this->helper->getAnonymousCharMaxLength();

        $customerEntityTable = $connection->getTableName('customer_entity');
        $select = $connection
            ->select()
            ->from($customerEntityTable)
            ->where($connection->quoteInto('email not like ?', '%'.Data::AUTOGENERATED.'%'))
            ->orWhere($connection->getLengthSql('firstname'). ' > ?', $maxCharLength)
            ->orWhere($connection->getLengthSql('lastname'). ' > ?', $maxCharLength)
        ;

        if ($this->limit) {
            $select->limit($this->limit);
        }

        $iterator->walk((string) $select,
            [[$this, 'anonymizeCustomer']],
            [
                'table' => $customerEntityTable,
                'customer' => $this->customerFactory->create(),
                'connection' => $connection
            ],
            $connection
        );
    }

    /**
     * Anonymize customers data
     */
    protected function anonymizeCustomerAddresses()
    {
        /** @var AdapterInterface $connection */
        $connection = $this->resourceConnection->getConnection();
        $iterator = $this->iteratorFactory->create();

        $maxCharLength = $this->helper->getAnonymousCharMaxLength();

        $entityTable = $connection->getTableName('customer_address_entity');
        $select = $connection
            ->select()
            ->from($entityTable)
            ->where($connection->getLengthSql('firstname'). ' > ?', $maxCharLength)
            ->orWhere($connection->getLengthSql('lastname'). ' > ?', $maxCharLength)
        ;

        if ($this->limit) {
            $select->limit($this->limit);
        }

        $iterator->walk((string) $select,
            [[$this, 'anonymizeCustomerAddress']],
            [
                'table' => $entityTable,
                'customerAddress' => $this->customerAddressFactory->create(),
                'connection' => $connection
            ],
            $connection
        );
    }

    /**
     * Anonymize quotes data
     */
    protected function anonymizeQuotes()
    {
        /** @var AdapterInterface $connection */
        $connection = $this->resourceConnection->getConnection();
        $iterator = $this->iteratorFactory->create();

        $maxCharLength = $this->helper->getAnonymousCharMaxLength();

        $entityTable = $connection->getTableName('quote');
        $select = $connection
            ->select()
            ->from($entityTable)
            ->where($connection->quoteInto('customer_email not like ?', '%'.Data::AUTOGENERATED.'%'))
            ->orWhere($connection->getLengthSql('customer_firstname'). ' > ?', $maxCharLength)
            ->orWhere($connection->getLengthSql('customer_lastname'). ' > ?', $maxCharLength)
        ;

        if ($this->limit) {
            $select->limit($this->limit);
        }

        $iterator->walk((string) $select,
            [[$this, 'anonymizeQuote']],
            [
                'table' => $entityTable,
                'quote' => $this->quoteFactory->create(),
                'connection' => $connection
            ],
            $connection
        );
    }

    /**
     * Anonymize quote addresses data
     */
    protected function anonymizeQuoteAddresses()
    {
        /** @var AdapterInterface $connection */
        $connection = $this->resourceConnection->getConnection();
        $iterator = $this->iteratorFactory->create();

        $maxCharLength = $this->helper->getAnonymousCharMaxLength();

        $entityTable = $connection->getTableName('quote_address');
        $select = $connection
            ->select()
            ->from($entityTable)
            ->where($connection->getLengthSql('firstname'). ' > ?', $maxCharLength)
            ->orWhere($connection->getLengthSql('lastname'). ' > ?', $maxCharLength)
        ;

        if ($this->limit) {
            $select->limit($this->limit);
        }

        $iterator->walk((string) $select,
            [[$this, 'anonymizeQuoteAddress']],
            [
                'table' => $entityTable,
                'quoteAddress' => $this->quoteAddressFactory->create(),
                'connection' => $connection
            ],
            $connection
        );
    }

    /**
     * Anonymize orders data
     */
    protected function anonymizeOrders()
    {
        /** @var AdapterInterface $connection */
        $connection = $this->resourceConnection->getConnection();
        $iterator = $this->iteratorFactory->create();

        $maxCharLength = $this->helper->getAnonymousCharMaxLength();

        $entityTable = $connection->getTableName('sales_order');
        $select = $connection
            ->select()
            ->from($entityTable)
            ->where($connection->quoteInto('customer_email not like ?', '%'.Data::AUTOGENERATED.'%'))
            ->orWhere($connection->getLengthSql('customer_firstname'). ' > ?', $maxCharLength)
            ->orWhere($connection->getLengthSql('customer_lastname'). ' > ?', $maxCharLength)
        ;

        if ($this->limit) {
            $select->limit($this->limit);
        }

        $iterator->walk((string) $select,
            [[$this, 'anonymizeOrder']],
            [
                'table' => $entityTable,
                'order' => $this->orderFactory->create(),
                'connection' => $connection
            ],
            $connection
        );
    }

    /**
     * Anonymize order addresses data
     */
    protected function anonymizeOrderAddresses()
    {
        /** @var AdapterInterface $connection */
        $connection = $this->resourceConnection->getConnection();
        $iterator = $this->iteratorFactory->create();

        $maxCharLength = $this->helper->getAnonymousCharMaxLength();

        $entityTable = $connection->getTableName('sales_order_address');
        $select = $connection
            ->select()
            ->from($entityTable)
            ->where($connection->getLengthSql('firstname'). ' > ?', $maxCharLength)
            ->orWhere($connection->getLengthSql('lastname'). ' > ?', $maxCharLength)
        ;

        if ($this->limit) {
            $select->limit($this->limit);
        }

        $iterator->walk((string) $select,
            [[$this, 'anonymizeOrderAddress']],
            [
                'table' => $entityTable,
                'orderAddress' => $this->orderAddressFactory->create(),
                'connection' => $connection
            ],
            $connection
        );
    }

    /**
     * Anonymize customers
     * @param $args
     */
    public function anonymizeCustomer($args)
    {
        /** @var AdapterInterface $connection */
        $connection = $args['connection'];
        /** @var string $table */
        $table = $args['table'];
        /** @var Customer $customer */
        $customer = clone $args['customer'];
        $customer->setData($args['row']);
        // Save as orig data before modification
        $customer->setOrigData();
        $customer->setHasDataChanges(false);
        $nespressoClubMemberId = $customer->getNespressoClubMemberId();
        $email = $customer->getEmail();
        $customerId = $customer->getId();
        $firstname = $customer->getFirstname();
        $customer->setFirstname($this->helper->anonymise($firstname));
        $lastname = $customer->getLastname();
        $customer->setLastname($this->helper->anonymise($lastname));
        $autogeneratedEmail = $this->generateAutogeneratedEmail($nespressoClubMemberId, $email);

        // Check if already existing anonymous email
        $checkId = $connection
            ->select()
            ->from($table)
            ->where('nespresso_club_member_id = ?', $nespressoClubMemberId)
            ->where($connection->quoteInto('email like ?', '%'.Data::AUTOGENERATED.'%'))
            ->where('entity_id <> ?', $customerId);
        $existingId = $connection->fetchOne($checkId);
        if (!empty($existingId)) {
            $autogeneratedEmail = $this->generateAutogeneratedEmail($nespressoClubMemberId, $email, true);
        }

        $customer->setEmail($autogeneratedEmail);

        $diff = array_diff($customer->getData(), $customer->getOrigData());
        if (!empty($diff)) {
            $updatedKeys = implode(',', array_keys($diff));
            if ($this->force) {
                $this->displayInfo(sprintf('%s customer data : %s has been anonymized (changed to %s).', $email, $updatedKeys, $autogeneratedEmail));
                $connection->update(
                    $table,
                    $diff,
                    ['entity_id = ?' => $customerId],
                    \Magento\Framework\DB\Adapter\AdapterInterface::INSERT_IGNORE
                );
            } else {
                $this->displayInfo(sprintf('%s customer data : %s would be anonymized (changed to %s).', $email, $updatedKeys, $autogeneratedEmail));
            }
        }
    }

    /**
     * Anonymize customer addresses
     * @param $args
     */
    public function anonymizeCustomerAddress($args)
    {
        /** @var AdapterInterface $connection */
        $connection = $args['connection'];
        /** @var string $table */
        $table = $args['table'];
        /** @var Address $customer */
        $customerAddress = clone $args['customerAddress'];
        $customerAddress->setData($args['row']);
        // Save as orig data before modification
        $customerAddress->setOrigData();
        $customerAddress->setHasDataChanges(false);
        $customerAddressId = $customerAddress->getId();
        $firstname = $customerAddress->getFirstname();
        $customerAddress->setFirstname($this->helper->anonymise($firstname));
        $lastname = $customerAddress->getLastname();
        $customerAddress->setLastname($this->helper->anonymise($lastname));
        $customerAddress->setCity(Data::AUTOGENERATED);
        $customerAddress->setStreet(Data::AUTOGENERATED);
        $diff = array_diff($customerAddress->getData(), $customerAddress->getOrigData());
        if (!empty($diff)) {
            $updatedKeys = implode(',', array_keys($diff));
            if ($this->force) {
                $this->displayInfo(sprintf('ID: %s customer address : %s has been anonymized.', $customerAddressId, $updatedKeys));
                $connection->update($table,
                    $diff,
                    ['entity_id = ?' => $customerAddressId]
                );
            } else {
                $this->displayInfo(sprintf('ID: %s customer address : %s would be anonymized.', $customerAddressId, $updatedKeys));
            }
        }
    }

    /**
     * Anonymize quotes
     * @param $args
     */
    public function anonymizeQuote($args)
    {
        /** @var AdapterInterface $connection */
        $connection = $args['connection'];
        /** @var string $table */
        $table = $args['table'];
        /** @var Quote $quote */
        $quote = clone $args['quote'];
        $quote->setData($args['row']);
        // Save as orig data before modification
        $quote->setOrigData();
        $quote->setHasDataChanges(false);
        $quoteId = $quote->getId();
        $nespressoClubMemberId = $quote->getNespressoClubMemberId();
        $email = $quote->getCustomerEmail();
        $autogeneratedEmail = $this->generateAutogeneratedEmail($nespressoClubMemberId, $email);
        $quote->setCustomerEmail($autogeneratedEmail);
        $firstname = $quote->getCustomerFirstname();
        $quote->setCustomerFirstname($this->helper->anonymise($firstname));
        $lastname = $quote->getCustomerLastname();
        $quote->setCustomerLastname($this->helper->anonymise($lastname));
        $diff = array_diff($quote->getData(), $quote->getOrigData());
        if (!empty($diff)) {
            $updatedKeys = implode(',', array_keys($diff));
            if ($this->force) {
                $this->displayInfo(sprintf('ID %s quote data : %s has been anonymized (email from %s to %s).', $quoteId, $updatedKeys, $email, $autogeneratedEmail));
                $connection->update(
                    $table,
                    $diff,
                    ['entity_id = ?' => $quoteId],
                    \Magento\Framework\DB\Adapter\AdapterInterface::INSERT_IGNORE
                );
            } else {
                $this->displayInfo(sprintf('ID %s quote data : %s would be anonymized (email from %s to %s).', $quoteId, $updatedKeys, $email, $autogeneratedEmail));
            }
        }
    }

    /**
     * Anonymize quote addresses
     * @param $args
     */
    public function anonymizeQuoteAddress($args)
    {
        /** @var AdapterInterface $connection */
        $connection = $args['connection'];
        /** @var string $table */
        $table = $args['table'];
        /** @var QuoteAddress $quoteAddress */
        $quoteAddress = clone $args['quoteAddress'];
        $quoteAddress->setData($args['row']);
        // Save as orig data before modification
        $quoteAddress->setOrigData();
        $quoteAddress->setHasDataChanges(false);
        $quoteAddressId = $quoteAddress->getId();
        $firstname = $quoteAddress->getFirstname();
        $quoteAddress->setFirstname($this->helper->anonymise($firstname));
        $lastname = $quoteAddress->getLastname();
        $quoteAddress->setLastname($this->helper->anonymise($lastname));
        $quoteAddress->setCity(Data::AUTOGENERATED);
        $quoteAddress->setStreet(Data::AUTOGENERATED);
        $diff = array_diff($quoteAddress->getData(), $quoteAddress->getOrigData());
        if (!empty($diff)) {
            $updatedKeys = implode(',', array_keys($diff));
            if ($this->force) {
                $this->displayInfo(sprintf('ID: %s quote address : %s has been anonymized.', $quoteAddressId, $updatedKeys));
                $connection->update($table,
                    $diff,
                    ['address_id = ?' => $quoteAddressId]
                );
            } else {
                $this->displayInfo(sprintf('ID: %s quote address : %s would be anonymized.', $quoteAddressId, $updatedKeys));
            }
        }
    }

    /**
     * Anonymize orders
     * @param $args
     */
    public function anonymizeOrder($args)
    {
        /** @var AdapterInterface $connection */
        $connection = $args['connection'];
        /** @var string $table */
        $table = $args['table'];
        /** @var Order $order */
        $order = clone $args['order'];
        $order->setData($args['row']);
        // Save as orig data before modification
        $order->setOrigData();
        $order->setHasDataChanges(false);
        $orderId = $order->getId();
        $nespressoClubMemberId = $order->getNespressoClubMemberId();
        $email = $order->getCustomerEmail();
        $autogeneratedEmail = $this->generateAutogeneratedEmail($nespressoClubMemberId, $email);
        $order->setCustomerEmail($autogeneratedEmail);
        $firstname = $order->getCustomerFirstname();
        $order->setCustomerFirstname($this->helper->anonymise($firstname));
        $lastname = $order->getCustomerLastname();
        $order->setCustomerLastname($this->helper->anonymise($lastname));
        $diff = array_diff($order->getData(), $order->getOrigData());
        if (!empty($diff)) {
            $updatedKeys = implode(',', array_keys($diff));
            if ($this->force) {
                $this->displayInfo(sprintf('ID %s order data : %s has been anonymized (email from %s to %s). ', $orderId, $updatedKeys, $email, $autogeneratedEmail));
                $connection->update(
                    $table,
                    $diff,
                    ['entity_id = ?' => $orderId],
                    \Magento\Framework\DB\Adapter\AdapterInterface::INSERT_IGNORE
                );
            } else {
                $this->displayInfo(sprintf('ID %s order data : %s would be anonymized (email from %s to %s).', $orderId, $updatedKeys, $email, $autogeneratedEmail));
            }
        }
    }

    /**
     * Anonymize order addresses
     * @param $args
     */
    public function anonymizeOrderAddress($args)
    {
        /** @var AdapterInterface $connection */
        $connection = $args['connection'];
        /** @var string $table */
        $table = $args['table'];
        /** @var OrderAddress $orderAddress */
        $orderAddress = clone $args['orderAddress'];
        $orderAddress->setData($args['row']);
        // Save as orig data before modification
        $orderAddress->setOrigData();
        $orderAddress->setHasDataChanges(false);
        $orderAddressId = $orderAddress->getId();
        $firstname = $orderAddress->getFirstname();
        $orderAddress->setFirstname($this->helper->anonymise($firstname));
        $lastname = $orderAddress->getLastname();
        $orderAddress->setLastname($this->helper->anonymise($lastname));
        $orderAddress->setCity(Data::AUTOGENERATED);
        $orderAddress->setStreet(Data::AUTOGENERATED);
        $diff = array_diff($orderAddress->getData(), $orderAddress->getOrigData());
        if (!empty($diff)) {
            $updatedKeys = implode(',', array_keys($diff));
            if ($this->force) {
                $this->displayInfo(sprintf('ID: %s order address : %s has been anonymized.', $orderAddressId, $updatedKeys));
                $connection->update($table,
                    $diff,
                    ['entity_id = ?' => $orderAddressId]
                );
            } else {
                $this->displayInfo(sprintf('ID: %s order address : %s would be anonymized.', $orderAddressId, $updatedKeys));
            }
        }
    }



    /**
     * Return autogenerated email
     * @param $nespressoClubMemberId
     * @param $email
     * @param bool $forceSha
     * @return mixed
     */
    public function generateAutogeneratedEmail($nespressoClubMemberId, $email, $forceSha = false)
    {
        // Exception
        if (trim($email) == TwintQuote::FAKE_EMAIL_ADDRESS) {
            return trim($email);
        }
        if (!array_key_exists($nespressoClubMemberId, $this->autogeneratedEmails) || $forceSha) {
            // If existing email with nespresso member id generate a static email alternative
            if (empty($nespressoClubMemberId) || $forceSha) {
                // Generate a sha512 25 first characters
                $nespressoClubMemberId = substr(hash('sha512', $email), 0, 15);
            }
            $autogeneratedEmail = $this->helper->getAutogeneratedEmail($nespressoClubMemberId);
            $this->autogeneratedEmails[$nespressoClubMemberId] = $autogeneratedEmail;
        }
        return $this->autogeneratedEmails[$nespressoClubMemberId];
    }

    /**
     * Display info message
     * @param $message
     */
    protected function displayInfo($message)
    {
        $this->displayOutput(self::OUTPUT_INFO, $message);
    }

    /**
     * Display error message
     * @param $message
     */
    protected function displayError($message)
    {
        $this->displayOutput(self::OUTPUT_ERROR, $message);
    }

    /**
     * Display info message
     * @param $type
     * @param $message
     */
    protected function displayOutput($type, $message)
    {
        if (!$this->silent) {
            $this->output->writeln(sprintf('<%s>%s</%s>', $type, $message, $type));
        }
    }

}
